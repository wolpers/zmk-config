/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen { zmk,physical-layout = &default_layout; };
};

/ {
    behaviors {

        ht_sticky: hold_tap_sticky {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&sk>;
        };


        mm_bspc_del: mod_morph_backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_n1: mod_morph_n1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&kp EXCL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_n2: mod_morph_n2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp AT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_n3: mod_morph_n3 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&kp HASH>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_n4: mod_morph_n4 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N4>, <&kp DLLR>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_n5: mod_morph_n5 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N5>, <&kp PRCNT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_n6: mod_morph_n6 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&kp CARET>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_n7: mod_morph_n7 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&kp AMPS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_n8: mod_morph_n8 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&kp ASTRK>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_n9: mod_morph_n9 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&kp LPAR>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_n0: mod_morph_n0 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_0>, <&kp RPAR>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_hash_tilde: mod_morph_hash_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HASH>, <&kp TILDE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // German umlauts with proper shift support

        mm_a_umlaut: mod_morph_a_umlaut {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(Q)>, <&kp RA(LS(Q))>;

            // ä / Ä

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_o_umlaut: mod_morph_o_umlaut {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(P)>, <&kp RA(LS(P))>;

            // ö / Ö

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_u_umlaut: mod_morph_u_umlaut {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(Y)>, <&kp RA(LS(Y))>;

            // ü / Ü

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Arrow keys with shift combinations

        mm_left_shome: mod_morph_left_shifthome {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp LS(HOME)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_down_spgdn: mod_morph_down_shiftpagedown {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOWN>, <&kp LS(PG_DN)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_right_send: mod_morph_right_shiftend {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp LS(END)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_up_spgup: mod_morph_up_shiftpageup {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UP>, <&kp LS(PG_UP)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_e_euro: mod_morph_e_euro {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp RA(N5)>;

            mods = <(MOD_RALT)>;

            // E €
        };

        mm_p_para: mod_morph_p_para {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp P>, <&kp RA(N3)>;

            mods = <(MOD_RALT)>;

            // P §
        };

        mm_s_eszett: mod_morph_s_eszett {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp S>, <&kp RA(S)>;

            mods = <(MOD_RALT)>;

            // S ß
        };

        mm_l_at: mod_morph_l_at {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp L>, <&kp AT>;
            mods = <(MOD_RALT)>;

            // L @
        };

        mm_a_umlaut_key: mod_morph_a_umlaut_key {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp A>, <&mm_a_umlaut>;

            mods = <(MOD_RALT)>;

            // A ä/Ä
        };

        mm_o_umlaut_key: mod_morph_o_umlaut_key {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp O>, <&mm_o_umlaut>;

            mods = <(MOD_RALT)>;

            // O ö/Ö
        };

        mm_u_umlaut_key: mod_morph_u_umlaut_key {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp U>, <&mm_u_umlaut>;

            mods = <(MOD_RALT)>;

            // U ü/Ü
        };

        mm_enter_esc: mod_morph_enter_esc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ENTER>, <&kp ESCAPE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };


        mm_comma_semi: mod_morph_comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_dot_colon: mod_morph_dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mm_minus_under: mod_morph_minus_under {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDER>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_curly: tap_dance_curly {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBRC>, <&kp RBRC>;
        };

        td_paren: tap_dance_paren {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LPAR>, <&kp RPAR>;
        };

        td_bracket: tap_dance_bracket {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        };

        td_angle: tap_dance_angle {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LT>, <&kp GT>;
        };

        mm_question_excl: mod_morph_question_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };


        unicode_input: unicode_input {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LALT>,
                       <&macro_tap &kp KP_PLUS>,
                       <&macro_release &kp LALT>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTZ";
            bindings = <
&ht_sticky LALT LALT        &kp Q             &kp W         &mm_e_euro  &kp R  &kp T    &trans  &trans  &kp Z      &mm_u_umlaut_key  &kp I           &mm_o_umlaut_key  &mm_p_para       &mm_enter_esc
&ht_sticky LSHIFT LSHIFT    &mm_a_umlaut_key  &mm_s_eszett  &kp D       &kp F  &kp G    &trans  &trans  &kp H      &kp J             &kp K           &mm_l_at             &mm_minus_under   &ht_sticky RSHIFT RSHIFT
&ht_sticky LCTRL LCTRL  &kp Y             &kp X         &kp C       &kp V  &kp B                    &kp N      &kp M             &mm_comma_semi  &mm_dot_colon     &mm_question_excl  &ht_sticky RCTRL RCTRL
                                                  &kp LCMD    &mo 1  &kp TAB                  &kp SPACE  &mo 2             &mm_bspc_del
            >;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&unicode_input  &trans  &td_angle    &td_bracket  &td_paren  &td_curly  &trans  &trans  &kp ASTRK  &kp N1  &kp N2  &kp N3  &kp PLUS   &kp EQUAL
&trans  &trans  &trans             &kp BSLH           &kp PIPE         &kp FSLH         &trans  &trans  &kp FSLH   &kp N4  &kp N5  &kp N6  &kp MINUS  &trans
&trans  &trans  &trans             &kp GRAVE          &kp SQT          &kp DQT                          &kp CARET  &kp N7  &kp N8  &kp N9  &trans     &trans
                                   &trans             &trans           &trans                           &trans     &kp N0  &trans
            >;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&trans  &trans  &trans          &mm_up_spgup    &trans          &trans  &trans  &trans  &trans  &kp F1   &kp F2  &kp F3  &trans   &trans
&trans  &trans  &mm_left_shome  &mm_down_spgdn  &mm_right_send  &trans  &trans  &trans  &trans  &kp F4   &kp F5  &kp F6  &trans   &trans
&trans  &trans  &trans          &trans          &trans          &trans                  &trans  &kp F7   &kp F8  &kp F9  &kp F11  &kp F12
                                &trans          &trans          &trans                  &trans  &kp F10  &trans
            >;
        };

        extra_layer_1 {
            display-name = "EXTRA 1";
            bindings = <
&bt BT_CLR  &bootloader  &sys_reset  &trans  &trans  &trans  &trans  &trans  &trans  &bt BT_SEL 0    &bt BT_SEL 1     &bt BT_SEL 2  &trans  &kp C_VOLUME_UP
&trans      &trans       &trans      &trans  &trans  &trans  &trans  &trans  &trans  &bt BT_SEL 3    &bt BT_SEL 4     &trans        &trans  &kp C_MUTE
&trans      &trans       &trans      &trans  &trans  &trans                  &trans  &studio_unlock  &rgb_ug RGB_TOG  &trans        &trans  &kp C_VOLUME_DOWN
                                     &trans  &trans  &trans                  &trans  &trans          &trans
            >;
        };
    };
};
